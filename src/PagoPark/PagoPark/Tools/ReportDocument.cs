using PagoPark.Models;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using Colors = QuestPDF.Helpers.Colors;
using IContainer = QuestPDF.Infrastructure.IContainer;

namespace PagoPark.Tools;

public class ReportDocument : IDocument
{
    readonly ShareReport report;

    public DocumentMetadata GetMetadata() => DocumentMetadata.Default;
    public DocumentSettings GetSettings() => DocumentSettings.Default;

    public ReportDocument(ShareReport shareReport)
    {
        report = shareReport;
    }

    public void Compose(IDocumentContainer container)
    {
        container
            .Page(page =>
            {
                page.Margin(25);
                page.Size(PageSizes.Letter);

                page.Header().Element(ComposeHeader);
                page.Content().Element(ComposeContent);

                page.Footer().AlignCenter().Text(x =>
                {
                    x.CurrentPageNumber();
                    x.Span(" / ");
                    x.TotalPages();
                });
            });
    }

    void ComposeHeader(IContainer container)
    {
        var titleStyle = TextStyle.Default.FontSize(14).SemiBold();

        container.Column(column =>
        {
            column.Item().Row(row =>
            {
                row.RelativeItem().Column(column =>
                {
                    column.Item().Text(report.Title).Style(titleStyle);
                    column.Item().Text($"Generated by {report.Issued}").SemiBold();
                    column.Item().Text(text =>
                    {
                        text.Span("Issue date: ").SemiBold();
                        text.Span($"{report.DatetimeIssue:d}");
                    });
                    //column.Item().Text(text =>
                    //{
                    //    text.Span("Week: ").SemiBold();
                    //    text.Span($"{DatetimeOfIssue:d}");
                    //    text.Span(" to ");
                    //    text.Span($"{DatetimeOfIssue:d}");
                    //});
                });
            });
            column.Item().PaddingVertical(5).LineHorizontal(1).LineColor(Colors.Grey.Medium);

        });
    }

    void ComposeContent(IContainer container)
    {
        container.PaddingTop(10).Column(column =>
        {
            column.Spacing(5);

            column.Item().Element(ComposeTable);
            var totalPrice = report.ReportItems.Sum(x => x.TotalCollected);
            column.Item().AlignRight().Text($"Total: {totalPrice}$").SemiBold().FontSize(14);

            if (!string.IsNullOrWhiteSpace(report.Observations))
            {
                column.Item().PaddingTop(5).Element(ComposeObservations);
            }

        });
    }

    void ComposeTable(IContainer container)
    {
        container.Table(table =>
        {
            table.ColumnsDefinition(columns =>
            {
                columns.RelativeColumn(3);
                columns.RelativeColumn();
                columns.RelativeColumn();
            });

            table.Header(header =>
            {
                header.Cell().Element(CellStyle).Text("Contract");
                header.Cell().Element(CellStyle).AlignRight().Text("Absence");
                header.Cell().Element(CellStyle).AlignRight().Text("Amount");

                static IContainer CellStyle(IContainer container)
                {
                    return container.DefaultTextStyle(x => x.SemiBold()).PaddingVertical(5).BorderBottom(1).BorderColor(Colors.Black);
                }
            });

            foreach (var item in report.ReportItems)
            {
                table.Cell().Element(CellStyle).Text(item.Vehicle).FontSize(12);
                table.Cell().Element(CellStyle).AlignRight().Text(item.Absence.ToString()).FontSize(12);
                table.Cell().Element(CellStyle).AlignRight().Text(item.TotalCollected.ToString("0.00")).FontSize(12);
                static IContainer CellStyle(IContainer container)
                {
                    return container.BorderBottom(1).BorderColor(Colors.Grey.Lighten2).PaddingVertical(5);
                }
            }
        });
    }

    void ComposeObservations(IContainer container)
    {
        container.Column(column =>
        {
            column.Item().Text(text =>
            {
                text.AlignCenter();
                text.Span("Observations").FontSize(14);
            });
            column.Item().Text(text =>
            {
                text.AlignLeft();
                text.Span($"{report.Observations}");
            });
        });
    }
}
